//@version=6
indicator('SENSEX Option IV + Greeks + Recommended Strike Table', overlay=true, max_lines_count=500, max_labels_count=500)

// -----------------------------------------------------

lookback = input.int(252, "IV Rank Lookback")
gap_threshold = 0.2
rf_rate = input.float(0.05, 'Risk-Free Rate', step=0.001)
div_yield = input.float(0.0, 'Dividend Yield', step=0.001)

// -----------------------------------------------------
// Fetch Spot and VIX
vix_live = request.security("NSE:INDIAVIX", "3", close)
spot     = request.security("BSE:SENSEX", "3", close)
rounded_spot = math.round(spot / 100) * 100

// ----------------
parse_expiry(expiry) =>
    y = str.substring(expiry, 0, 2)
    m = str.substring(expiry, 2, 4)
    d = str.length(expiry) >= 6 ? str.substring(expiry, 4, 6) : '01'
    //var array<string> call_strikes_array = array.new_string()
    year_full = 2000 + math.floor(str.tonumber(y))
    expiry_time = timestamp(year_full, math.floor(str.tonumber(m)), math.floor(str.tonumber(d)), 15, 30)
    ms_in_day = 1000 * 60 * 60 * 24
    dte = math.max(1, (expiry_time - time) / ms_in_day)
    T = dte / 365
    [T, dte]

// -----------------------------------------------------
// Black-Scholes helper functions
norm_cdf(x) =>
    k = 1.0 / (1.0 + 0.2316419 * math.abs(x))
    poly = k * (0.319381530 + k * (-0.356563782 + k * (1.781477937 + k * (-1.821255978 + 1.330274429 * k))))
    approx = 1.0 - 0.398942280401 * math.exp(-0.5 * x * x) * poly
    x < 0 ? 1.0 - approx : approx

bs_d1(S,K,T,r,q,sigma) =>
    (math.log(S / K) + (r - q + 0.5 * sigma * sigma) * T) / (sigma * math.sqrt(T))

bs_price(S, K, T, r, q, sigma, call_option) =>
    d1 = bs_d1(S,K,T,r,q,sigma)
    d2 = d1 - sigma * math.sqrt(T)
    N_d1 = norm_cdf(call_option ? d1 : -d1)
    N_d2 = norm_cdf(call_option ? d2 : -d2)
    call_option ? S * math.exp(-q * T) * N_d1 - K * math.exp(-r * T) * N_d2 :
                  K * math.exp(-r * T) * N_d2 - S * math.exp(-q * T) * N_d1

delta(S,K,T,r,q,sigma,call_option) =>
    d1 = bs_d1(S,K,T,r,q,sigma)
    call_option ? math.exp(-q*T) * norm_cdf(d1) : -math.exp(-q*T) * norm_cdf(-d1)

gamma(S,K,T,r,q,sigma) =>
    d1 = bs_d1(S,K,T,r,q,sigma)
    norm_pdf = 0.398942280401 * math.exp(-0.5 * d1 * d1)
    norm_pdf * math.exp(-q*T) / (S * sigma * math.sqrt(T))

vega(S,K,T,r,q,sigma) =>
    d1 = bs_d1(S,K,T,r,q,sigma)
    norm_pdf = 0.398942280401 * math.exp(-0.5 * d1 * d1)
    S * math.exp(-q*T) * norm_pdf * math.sqrt(T)

theta(S,K,T,r,q,sigma,call_option) =>
    d1 = bs_d1(S,K,T,r,q,sigma)
    d2 = d1 - sigma*math.sqrt(T)
    norm_pdf = 0.398942280401 * math.exp(-0.5 * d1*d1)
    term1 = - (S * norm_pdf * sigma * math.exp(-q*T)) / (2 * math.sqrt(T))
    if call_option
        term2 = r*K*math.exp(-r*T)*norm_cdf(d2)
        term3 = -q*S*math.exp(-q*T)*norm_cdf(d1)
        term1 - term2 + term3
    else
        term2 = r*K*math.exp(-r*T)*norm_cdf(-d2)
        term3 = -q*S*math.exp(-q*T)*norm_cdf(-d1)
        term1 + term2 + term3

bisection_iv(market_price,S,K,T,r,q,call_option) =>
    if market_price <= 0
        0.0
    else
        low_ = 1e-5
        high_ = 5.0
        mid = 0.0
        price = 0.0
        for i = 0 to 40
            mid := (low_ + high_)/2
            price := bs_price(S,K,T,r,q,mid,call_option)
            if math.abs(price - market_price) < 0.0001
                break
            if price < market_price
                low_ := mid
            else
                high_ := mid
        mid

// -----------------------------------------------------
// Derive option ticker
get_option_ticker(strike_val, is_call_val) =>
    strike_str_val = str.tostring(strike_val)
    base_sym   = str.substring(syminfo.ticker,0,3)
    expiry_str = str.substring(syminfo.ticker,3,9)
    type_str   = is_call_val ? "C" : "P"
    y = str.substring(expiry_str, 0, 2)
    m = str.substring(expiry_str, 2, 4)
    d = str.length(expiry_str) >= 6 ? str.substring(expiry_str, 4, 6) : '01'
    //var array<string> call_strikes_array = array.new_string()
    year_full = 2000 + math.floor(str.tonumber(y))
    expiry_time = timestamp(year_full, math.floor(str.tonumber(m)), math.floor(str.tonumber(d)), 15, 30)
    ms_in_day = 1000 * 60 * 60 * 24
    dte = math.max(1, (expiry_time - time) / ms_in_day)
    T = dte / 365
    [base_sym + expiry_str + type_str + strike_str_val, T]

// -----------------------------------------------------
// Strikes
var array<float> atm_below_n_above_strikes = array.new_float()
array.clear(atm_below_n_above_strikes)

for i = 1 to 3
    strike_up = rounded_spot + i*100
    strike_dn = rounded_spot - i*100
    array.push(atm_below_n_above_strikes, strike_up)
    array.push(atm_below_n_above_strikes, strike_dn)

// -----------------------------------------------------
// Arrays for data
new_arr() => array.new_float()
var call_ivs   = new_arr()
var put_ivs    = new_arr()
var call_delta = new_arr()
var put_delta  = new_arr()
var call_gamma = new_arr()
var put_gamma  = new_arr()
var call_vega  = new_arr()
var put_vega   = new_arr()
var call_theta = new_arr()
var put_theta  = new_arr()

// Clear arrays at the beginning of each bar or calculation cycle
array.clear(call_ivs)
array.clear(put_ivs)
array.clear(call_delta)
array.clear(put_delta)
array.clear(call_gamma)
array.clear(put_gamma)
array.clear(call_vega)
array.clear(put_vega)
array.clear(call_theta)
array.clear(put_theta)

// -----------------------------------------------------
// Fill Greeks + IV
calc_ivs_for_strikes(float[] strike_arr, bool is_call, float[] iv_arr, float[] delta_arr, float[] gamma_arr, float[] vega_arr, float[] theta_arr ) =>
    for i = 0 to array.size(strike_arr) - 1
        strike_temp = array.get(strike_arr, i)
        [opt_ticker, T] = get_option_ticker(strike_temp, is_call)
        opt_price = request.security(opt_ticker,"3",close)
        //strike_str_val = str.tostring(strike_temp)
        // Request price and calculate implied vol
        //T = 1 / 123

        iv_temp = bisection_iv(opt_price, spot, strike_temp, T, rf_rate, div_yield, is_call)
        opt_delta = delta(spot, strike_temp, T, rf_rate, div_yield, iv_temp, is_call)
        callGamma = gamma(spot, strike_temp, T, rf_rate, div_yield, iv_temp)
        callVega  = vega(spot, strike_temp, T, rf_rate, div_yield, iv_temp)
        callTheta = theta(spot, strike_temp, T, rf_rate, div_yield, iv_temp, is_call)
        array.push(iv_arr, iv_temp)
        array.push(delta_arr, opt_delta)
        array.push(gamma_arr, callGamma)
        array.push(vega_arr, callVega)
        array.push(theta_arr, callTheta)

// ----------------------main

// -----------------------------------------------------
// Select recommended strike + side
select_trade_strike() =>
    max_diff = -1.0
    float strike_sel = na
    string side_sel = ""
    for i=0 to array.size(call_ivs)-1
        call_iv = array.get(call_ivs,i)
        put_iv  = array.get(put_ivs,i)
        strike  = array.get(atm_below_n_above_strikes,i)
        diff_call = call_iv - put_iv
        diff_put  = put_iv - call_iv
        if diff_call > max_diff
            max_diff := diff_call
            strike_sel := strike
            side_sel := "CALL"
        if diff_put > max_diff
            max_diff := diff_put
            strike_sel := strike
            side_sel := "PUT"
    [strike_sel, side_sel]

// iv and greek compute
calc_ivs_for_strikes(atm_below_n_above_strikes, true, call_ivs, call_delta, call_gamma, call_vega, call_theta)
calc_ivs_for_strikes(atm_below_n_above_strikes, false, put_ivs, put_delta, put_gamma, put_vega, put_theta)

// use function
[strike_rec, side_rec] = select_trade_strike()

var table option_table = table.new(position.top_right, 13, 10, border_width=1)
if barstate.islast
    table.cell(option_table,0,0,"Put Delta",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,1,0,"Put Gamma",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,2,0,"Put Vega",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,3,0,"Call Theta",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,4,0,"Call IV",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,5,0,"Call Gamma",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,6,0,"Call Delta",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,7,0,"Strike",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,8,0,"Call Vega",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,9,0,"Strike ID",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,10,0,"Put IV",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,11,0,"Put Theta",text_color=color.white,bgcolor=color.blue)
    table.cell(option_table,12,0,"Put Theta",text_color=color.white,bgcolor=color.blue)

    for i=0 to array.size(atm_below_n_above_strikes)-1
        strike = array.get(atm_below_n_above_strikes,i)
        call_iv = array.get(call_ivs,i)
        put_iv  = array.get(put_ivs,i)
        call_delta_val = array.get(call_delta,i)
        put_delta_val = array.get(put_delta,i)
        call_gamma_val = array.get(call_gamma,i)
        put_gamma_val = array.get(put_gamma,i)
        call_vega_val = array.get(call_vega,i)
        put_vega_val = array.get(put_vega,i)
        call_theta_val = array.get(call_theta,i)
        put_theta_val = array.get(put_theta,i)

        [strike_id, _] = get_option_ticker(strike, true)

        row_bg = strike == strike_rec ? color.new(color.green, 80) : na

        table.cell(option_table,0,i+1,str.tostring(put_delta_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,1,i+1,str.tostring(put_gamma_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,2,i+1,str.tostring(put_vega_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,3,i+1,str.tostring(call_theta_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,4,i+1,str.tostring(call_iv,'#.###'),
                   bgcolor=(strike==strike_rec and side_rec=="CALL") ? color.green : na)
        table.cell(option_table,5,i+1,str.tostring(call_gamma_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,6,i+1,str.tostring(call_delta_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,7,i+1,str.tostring(strike), bgcolor=row_bg)
        table.cell(option_table,8,i+1,str.tostring(call_vega_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,9,i+1,str.tostring(strike_id), bgcolor=row_bg)
        table.cell(option_table,10,i+1,str.tostring(put_iv,'#.###'),
                   bgcolor=(strike==strike_rec and side_rec=="PUT") ? color.green : na)
        table.cell(option_table,11,i+1,str.tostring(put_theta_val,'#.###'), bgcolor=row_bg)
        table.cell(option_table,12,i+1,str.tostring(put_theta_val,'#.###'), bgcolor=row_bg)

// -----------------------------------------------------
// Display Clean Signal
// if barstate.islast and not na(strike_rec)
//     label.new(bar_index-, spot, text="BUY " + side_rec + " @" + str.tostring(strike_rec),
//               style=label.style_label_up, color=color.orange, textcolor=color.white)
